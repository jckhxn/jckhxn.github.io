{"id":"../../../../node_modules/fortune/lib/request/validate_records.js","dependencies":[{"name":"/Users/jack/package.json","includedInParent":true,"mtime":1602994159198},{"name":"/Users/jack/node_modules/fortune/package.json","includedInParent":true,"mtime":1602994155602},{"name":"../common/message","loc":{"line":3,"column":22},"parent":"/Users/jack/node_modules/fortune/lib/request/validate_records.js","resolved":"/Users/jack/node_modules/fortune/lib/common/message.js"},{"name":"../common/errors","loc":{"line":5,"column":21},"parent":"/Users/jack/node_modules/fortune/lib/request/validate_records.js","resolved":"/Users/jack/node_modules/fortune/lib/common/errors.js"},{"name":"../common/keys","loc":{"line":8,"column":19},"parent":"/Users/jack/node_modules/fortune/lib/request/validate_records.js","resolved":"/Users/jack/node_modules/fortune/lib/common/keys.js"}],"generated":{"js":"'use strict'\n\nvar message = require('../common/message')\n\nvar errors = require('../common/errors')\nvar ConflictError = errors.ConflictError\n\nvar keys = require('../common/keys')\nvar linkKey = keys.link\nvar isArrayKey = keys.isArray\nvar inverseKey = keys.inverse\n\n/**\n * Do some validation on records to be created or updated to determine\n * if there are any records which have overlapping to-one relationships,\n * or non-unique array relationships.\n *\n * @param {Object[]} records\n * @param {Object} fields\n * @param {Object} links\n * @param {Object} meta\n */\nmodule.exports = function validateRecords (records, fields, links, meta) {\n  var recordTypes = this.recordTypes\n  var language = meta.language\n  var toOneMap = {}\n  var i, j, k, l, m, n, value, field, record, id, ids, seen,\n    fieldLink, fieldInverse, fieldIsArray, inverseIsArray\n\n  for (i = 0, j = links.length; i < j; i++) {\n    field = links[i]\n    fieldLink = fields[field][linkKey]\n    fieldInverse = fields[field][inverseKey]\n    fieldIsArray = fields[field][isArrayKey]\n    inverseIsArray = recordTypes[fieldLink][fieldInverse][isArrayKey]\n\n    if (fieldIsArray)\n      for (k = 0, l = records.length; k < l; k++) {\n        record = records[k]\n        if (!Array.isArray(record[field])) continue\n        ids = record[field]\n        seen = {}\n\n        for (m = 0, n = ids.length; m < n; m++) {\n          id = ids[m]\n          if (seen.hasOwnProperty(id)) throw new ConflictError(\n            message('CollisionDuplicate', language, { id: id, field: field }))\n          else seen[id] = true\n        }\n      }\n\n    if (!inverseIsArray) {\n      toOneMap[field] = {}\n\n      for (k = 0, l = records.length; k < l; k++) {\n        record = records[k]\n        value = record[field]\n        ids = Array.isArray(value) ? value : value ? [ value ] : []\n\n        for (m = 0, n = ids.length; m < n; m++) {\n          id = ids[m]\n          if (!toOneMap[field].hasOwnProperty(id)) toOneMap[field][id] = true\n          else throw new ConflictError(\n            message('CollisionToOne', language, { field: field }))\n        }\n      }\n    }\n  }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../../../node_modules/fortune/lib/request/validate_records.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}}],"sources":{"../../../../node_modules/fortune/lib/request/validate_records.js":"'use strict'\n\nvar message = require('../common/message')\n\nvar errors = require('../common/errors')\nvar ConflictError = errors.ConflictError\n\nvar keys = require('../common/keys')\nvar linkKey = keys.link\nvar isArrayKey = keys.isArray\nvar inverseKey = keys.inverse\n\n/**\n * Do some validation on records to be created or updated to determine\n * if there are any records which have overlapping to-one relationships,\n * or non-unique array relationships.\n *\n * @param {Object[]} records\n * @param {Object} fields\n * @param {Object} links\n * @param {Object} meta\n */\nmodule.exports = function validateRecords (records, fields, links, meta) {\n  var recordTypes = this.recordTypes\n  var language = meta.language\n  var toOneMap = {}\n  var i, j, k, l, m, n, value, field, record, id, ids, seen,\n    fieldLink, fieldInverse, fieldIsArray, inverseIsArray\n\n  for (i = 0, j = links.length; i < j; i++) {\n    field = links[i]\n    fieldLink = fields[field][linkKey]\n    fieldInverse = fields[field][inverseKey]\n    fieldIsArray = fields[field][isArrayKey]\n    inverseIsArray = recordTypes[fieldLink][fieldInverse][isArrayKey]\n\n    if (fieldIsArray)\n      for (k = 0, l = records.length; k < l; k++) {\n        record = records[k]\n        if (!Array.isArray(record[field])) continue\n        ids = record[field]\n        seen = {}\n\n        for (m = 0, n = ids.length; m < n; m++) {\n          id = ids[m]\n          if (seen.hasOwnProperty(id)) throw new ConflictError(\n            message('CollisionDuplicate', language, { id: id, field: field }))\n          else seen[id] = true\n        }\n      }\n\n    if (!inverseIsArray) {\n      toOneMap[field] = {}\n\n      for (k = 0, l = records.length; k < l; k++) {\n        record = records[k]\n        value = record[field]\n        ids = Array.isArray(value) ? value : value ? [ value ] : []\n\n        for (m = 0, n = ids.length; m < n; m++) {\n          id = ids[m]\n          if (!toOneMap[field].hasOwnProperty(id)) toOneMap[field][id] = true\n          else throw new ConflictError(\n            message('CollisionToOne', language, { field: field }))\n        }\n      }\n    }\n  }\n}\n"},"lineCount":70}},"error":null,"hash":"ed69305b003ec4f815b7758341845816","cacheData":{"env":{}}}